// This file is generated by Firebase Genkit.
// Do not edit this file as changes may be overwritten.

'use server';

/**
 * @fileOverview An AI agent for suggesting alternative service providers based on proximity and ratings.
 *
 * - suggestAlternativeServiceProvider - A function that suggests alternative service providers.
 * - SuggestAlternativeServiceProviderInput - The input type for the suggestAlternativeServiceProvider function.
 * - SuggestAlternativeServiceProviderOutput - The return type for the suggestAlternativeServiceProvider function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestAlternativeServiceProviderInputSchema = z.object({
  city: z.string().describe('The city where the service is needed.'),
  neighborhood: z.string().describe('The neighborhood where the service is needed.'),
  serviceCategory: z.string().describe('The category of the service (e.g., Water Can, Maid, Electrician).'),
  currentProviderRating: z.number().describe('The performance rating of the current service provider.'),
});
export type SuggestAlternativeServiceProviderInput = z.infer<typeof SuggestAlternativeServiceProviderInputSchema>;

const SuggestAlternativeServiceProviderOutputSchema = z.object({
  alternativeProviders: z.array(
    z.object({
      name: z.string().describe('The name of the alternative service provider.'),
      rating: z.number().describe('The performance rating of the alternative service provider.'),
      distance: z.string().describe('The approximate distance from the user.'),
    })
  ).describe('A list of alternative service providers, sorted by proximity and rating.'),
});
export type SuggestAlternativeServiceProviderOutput = z.infer<typeof SuggestAlternativeServiceProviderOutputSchema>;

export async function suggestAlternativeServiceProvider(
  input: SuggestAlternativeServiceProviderInput
): Promise<SuggestAlternativeServiceProviderOutput> {
  return suggestAlternativeServiceProviderFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestAlternativeServiceProviderPrompt',
  input: {schema: SuggestAlternativeServiceProviderInputSchema},
  output: {schema: SuggestAlternativeServiceProviderOutputSchema},
  prompt: `You are a helpful assistant designed to suggest alternative service providers based on proximity and ratings.

You are provided with the city, neighborhood, service category, and the current service provider's rating.

Based on this information, suggest a list of alternative service providers, sorted by proximity and rating.

City: {{{city}}}
Neighborhood: {{{neighborhood}}}
Service Category: {{{serviceCategory}}}
Current Provider Rating: {{{currentProviderRating}}}

Format your response as a JSON array of alternative providers with name, rating, and distance.
`,
});

const suggestAlternativeServiceProviderFlow = ai.defineFlow(
  {
    name: 'suggestAlternativeServiceProviderFlow',
    inputSchema: SuggestAlternativeServiceProviderInputSchema,
    outputSchema: SuggestAlternativeServiceProviderOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
